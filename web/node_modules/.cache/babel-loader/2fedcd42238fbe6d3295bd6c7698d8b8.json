{"ast":null,"code":"import _objectSpread from \"/Users/DavidTerral/Documents/td-data-generation/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/DavidTerral/Documents/td-data-generation/web/src/components/GeneratorForm.js\";\nimport React, { Component } from \"react\";\nimport { Form, Button, Input, Label, Col, Row, FormGroup } from \"reactstrap\";\nimport { GeneratorInput as GeneratorColumnInput } from \"./GeneratorColumnInput\";\n\nclass GeneratorForm extends Component {\n  constructor() {\n    super();\n    this.dataTypeChanged = this.dataTypeChanged.bind(this);\n    this.numColsChanged = this.numColsChanged.bind(this);\n    this.colOptionsChanged = this.colOptionsChanged.bind(this);\n    this.generateData = this.generateData.bind(this);\n    this.state = {\n      numRows: \"\",\n      fileType: \"\",\n      colTypeArray: [],\n      numColsArray: [],\n      colOptsArray: []\n    };\n  }\n\n  dataTypeChanged(id, type) {\n    var colTypeArray = _objectSpread({}, this.state.colTypeArray);\n\n    colTypeArray[id] = type;\n    this.setState({\n      colTypeArray\n    });\n  }\n\n  numColsChanged(id, numCols) {\n    var numColsArray = _objectSpread({}, this.state.numColsArray);\n\n    numColsArray[id] = numCols;\n    this.setState({\n      numColsArray\n    });\n  }\n\n  colOptionsChanged(id, colOpts) {\n    var colOptsArray = _objectSpread({}, this.state.colOptsArray);\n\n    colOptsArray[id] = colOpts;\n    this.setState({\n      colOptsArray\n    });\n  }\n\n  generateData(options) {// TO DO: two possible options for implementation (TBD):\n    //    (1) perform the data file export or (PROBABLY THIS OPTION)\n    //    (2) send the options as a paramter to a function in app.py to export the data\n  }\n\n  render() {\n    return React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Column Options\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Column Data Type\")), React.createElement(Col, {\n      md: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Number of Columns\"))), React.createElement(GeneratorColumnInput, {\n      id: 0,\n      dataTypeChanged: this.dataTypeChanged,\n      numColsChanged: this.numColsChanged,\n      colOptionsChanged: this.colOptionsChanged,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Row & File Options\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(FormGroup, {\n      row: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Number of Rows\"), React.createElement(Input, {\n      type: \"number\",\n      name: \"numrows\",\n      id: \"numrows\",\n      onChange: e => this.setState({\n        numRows: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"File Format\"), React.createElement(Input, {\n      type: \"select\",\n      name: \"filetype\",\n      id: \"filetype\",\n      onChange: e => this.setState({\n        fileType: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"CSV\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Excel\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"JSON\")))), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"submit\",\n      color: \"success\",\n      onClick: this.generateData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Generate Data\"));\n  }\n\n}\n\nexport { GeneratorForm };","map":{"version":3,"sources":["/Users/DavidTerral/Documents/td-data-generation/web/src/components/GeneratorForm.js"],"names":["React","Component","Form","Button","Input","Label","Col","Row","FormGroup","GeneratorInput","GeneratorColumnInput","GeneratorForm","constructor","dataTypeChanged","bind","numColsChanged","colOptionsChanged","generateData","state","numRows","fileType","colTypeArray","numColsArray","colOptsArray","id","type","setState","numCols","colOpts","options","render","e","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button, Input, Label, Col, Row, FormGroup } from \"reactstrap\";\nimport { GeneratorInput as GeneratorColumnInput } from \"./GeneratorColumnInput\";\n\nclass GeneratorForm extends Component {\n  constructor() {\n    super();\n    this.dataTypeChanged = this.dataTypeChanged.bind(this);\n    this.numColsChanged = this.numColsChanged.bind(this);\n    this.colOptionsChanged = this.colOptionsChanged.bind(this);\n    this.generateData = this.generateData.bind(this);\n    this.state = {\n      numRows: \"\",\n      fileType: \"\",\n      colTypeArray: [],\n      numColsArray: [],\n      colOptsArray: []\n    };\n  }\n\n  dataTypeChanged(id, type) {\n    var colTypeArray = { ...this.state.colTypeArray };\n    colTypeArray[id] = type;\n    this.setState({ colTypeArray });\n  }\n\n  numColsChanged(id, numCols) {\n    var numColsArray = { ...this.state.numColsArray };\n    numColsArray[id] = numCols;\n    this.setState({ numColsArray });\n  }\n\n  colOptionsChanged(id, colOpts) {\n    var colOptsArray = { ...this.state.colOptsArray };\n    colOptsArray[id] = colOpts;\n    this.setState({ colOptsArray });\n  }\n\n  generateData(options) {\n    // TO DO: two possible options for implementation (TBD):\n    //    (1) perform the data file export or (PROBABLY THIS OPTION)\n    //    (2) send the options as a paramter to a function in app.py to export the data\n  }\n\n  render() {\n    return (\n      <Form>\n        <h5>Column Options</h5>\n        <hr />\n        <Row>\n          <Col md={3}>\n            <Label>Column Data Type</Label>\n          </Col>\n          <Col md={3}>\n            <Label>Number of Columns</Label>\n          </Col>\n        </Row>\n        <GeneratorColumnInput\n          id={0}\n          dataTypeChanged={this.dataTypeChanged}\n          numColsChanged={this.numColsChanged}\n          colOptionsChanged={this.colOptionsChanged}\n        />\n        <br />\n        <h5>Row & File Options</h5>\n        <hr />\n        <FormGroup row>\n          <Col md={3}>\n            <Label>Number of Rows</Label>\n            <Input\n              type=\"number\"\n              name=\"numrows\"\n              id=\"numrows\"\n              onChange={e => this.setState({ numRows: e.target.value })}\n            />\n          </Col>\n          <Col md={2}>\n            <Label>File Format</Label>\n            <Input\n              type=\"select\"\n              name=\"filetype\"\n              id=\"filetype\"\n              onChange={e => this.setState({ fileType: e.target.value })}\n            >\n              <option>CSV</option>\n              <option>Excel</option>\n              <option>JSON</option>\n            </Input>\n          </Col>\n        </FormGroup>\n        <hr />\n        <Button type=\"submit\" color=\"success\" onClick={this.generateData}>\n          Generate Data\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport { GeneratorForm };\n"]},"metadata":{},"sourceType":"module"}