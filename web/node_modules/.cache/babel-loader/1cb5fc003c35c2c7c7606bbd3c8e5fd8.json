{"ast":null,"code":"import _objectSpread from \"/Users/DavidTerral/Documents/TeraData_Data_Generator/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/DavidTerral/Documents/TeraData_Data_Generator/web/src/components/GeneratorForm.js\";\nimport React, { Component } from \"react\";\nimport { Form, Button, Input, Label, Col, Row, FormGroup } from \"reactstrap\";\nimport { GeneratorInput as GeneratorColumnInput } from \"./GeneratorColumnInput\";\n\nclass GeneratorForm extends Component {\n  constructor() {\n    super();\n    this.dataTypeChanged = this.dataTypeChanged.bind(this);\n    this.numColsChanged = this.numColsChanged.bind(this);\n    this.colOptionsChanged = this.colOptionsChanged.bind(this);\n    this.appendInput = this.appendInput.bind(this);\n    this.generateData = this.generateData.bind(this);\n    this.state = {\n      numRows: \"\",\n      fileType: \"CSV\",\n      colTypeArray: [\"integer\"],\n      numColsArray: [0],\n      colOptsArray: [\"\"],\n      idArray: [\"0\"]\n    };\n  }\n\n  dataTypeChanged(id, type) {\n    var colTypeArray = _objectSpread({}, this.state.colTypeArray);\n\n    colTypeArray[id] = type;\n    this.setState({\n      colTypeArray\n    });\n  }\n\n  numColsChanged(id, numCols) {\n    var numColsArray = _objectSpread({}, this.state.numColsArray);\n\n    numColsArray[id] = numCols;\n    this.setState({\n      numColsArray\n    });\n  }\n\n  colOptionsChanged(id, colOpts) {\n    var colOptsArray = _objectSpread({}, this.state.colOptsArray);\n\n    colOptsArray[id] = colOpts;\n    this.setState({\n      colOptsArray\n    });\n  }\n\n  appendInput() {\n    var newInput = \"\".concat(this.state.idArray.length);\n    this.setState(prevState => ({\n      idArray: prevState.idArray.concat([newInput])\n    }));\n  }\n\n  generateData(options) {// TO DO: two possible options for implementation (TBD):\n    //    (1) perform the data file export or (PROBABLY THIS OPTION)\n    //    (2) send the options as a paramter to a function in app.py to export the data\n  }\n\n  render() {\n    return React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Column Options\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Column Data Type\")), React.createElement(Col, {\n      md: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Number of Columns\"))), this.state.idArray.map(id => React.createElement(GeneratorColumnInput, {\n      id: id,\n      key: id,\n      dataTypeChanged: this.dataTypeChanged,\n      numColsChanged: this.numColsChanged,\n      colOptionsChanged: this.colOptionsChanged,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })), React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.appendInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Add Field\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Row & File Options\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(FormGroup, {\n      row: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(Col, {\n      md: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Number of Rows\"), React.createElement(Input, {\n      type: \"number\",\n      name: \"numrows\",\n      id: \"numrows\",\n      onChange: e => {\n        this.setState({\n          numRows: e.target.value\n        });\n        console.log(this.state);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    })), React.createElement(Col, {\n      md: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"File Format\"), React.createElement(Input, {\n      type: \"select\",\n      name: \"filetype\",\n      id: \"filetype\",\n      onChange: e => this.setState({\n        fileType: e.target.value\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"CSV\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Excel\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"JSON\")))), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"success\",\n      onClick: this.generateData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Generate Data\"));\n  }\n\n}\n\nexport { GeneratorForm };","map":{"version":3,"sources":["/Users/DavidTerral/Documents/TeraData_Data_Generator/web/src/components/GeneratorForm.js"],"names":["React","Component","Form","Button","Input","Label","Col","Row","FormGroup","GeneratorInput","GeneratorColumnInput","GeneratorForm","constructor","dataTypeChanged","bind","numColsChanged","colOptionsChanged","appendInput","generateData","state","numRows","fileType","colTypeArray","numColsArray","colOptsArray","idArray","id","type","setState","numCols","colOpts","newInput","length","prevState","concat","options","render","map","e","target","value","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Form, Button, Input, Label, Col, Row, FormGroup } from \"reactstrap\";\nimport { GeneratorInput as GeneratorColumnInput } from \"./GeneratorColumnInput\";\n\nclass GeneratorForm extends Component {\n  constructor() {\n    super();\n    this.dataTypeChanged = this.dataTypeChanged.bind(this);\n    this.numColsChanged = this.numColsChanged.bind(this);\n    this.colOptionsChanged = this.colOptionsChanged.bind(this);\n    this.appendInput = this.appendInput.bind(this);\n    this.generateData = this.generateData.bind(this);\n    this.state = {\n      numRows: \"\",\n      fileType: \"CSV\",\n      colTypeArray: [\"integer\"],\n      numColsArray: [0],\n      colOptsArray: [\"\"],\n      idArray: [\"0\"]\n    };\n  }\n\n  dataTypeChanged(id, type) {\n    var colTypeArray = { ...this.state.colTypeArray };\n    colTypeArray[id] = type;\n    this.setState({ colTypeArray });\n  }\n\n  numColsChanged(id, numCols) {\n    var numColsArray = { ...this.state.numColsArray };\n    numColsArray[id] = numCols;\n    this.setState({ numColsArray });\n  }\n\n  colOptionsChanged(id, colOpts) {\n    var colOptsArray = { ...this.state.colOptsArray };\n    colOptsArray[id] = colOpts;\n    this.setState({ colOptsArray });\n  }\n\n  appendInput() {\n    var newInput = `${this.state.idArray.length}`;\n    this.setState(prevState => ({\n      idArray: prevState.idArray.concat([newInput])\n    }));\n  }\n\n  generateData(options) {\n    // TO DO: two possible options for implementation (TBD):\n    //    (1) perform the data file export or (PROBABLY THIS OPTION)\n    //    (2) send the options as a paramter to a function in app.py to export the data\n  }\n\n  render() {\n    return (\n      <Form>\n        <h5>Column Options</h5>\n        <hr />\n        <Row>\n          <Col md={3}>\n            <Label>Column Data Type</Label>\n          </Col>\n          <Col md={3}>\n            <Label>Number of Columns</Label>\n          </Col>\n        </Row>\n\n        {this.state.idArray.map(id => (\n          <GeneratorColumnInput\n            id={id}\n            key={id}\n            dataTypeChanged={this.dataTypeChanged}\n            numColsChanged={this.numColsChanged}\n            colOptionsChanged={this.colOptionsChanged}\n          />\n        ))}\n        <Button color=\"secondary\" onClick={this.appendInput}>\n          Add Field\n        </Button>\n        <br />\n        <br />\n        <h5>Row & File Options</h5>\n        <hr />\n        <FormGroup row>\n          <Col md={3}>\n            <Label>Number of Rows</Label>\n            <Input\n              type=\"number\"\n              name=\"numrows\"\n              id=\"numrows\"\n              onChange={e => {\n                this.setState({ numRows: e.target.value });\n                console.log(this.state);\n              }}\n            />\n          </Col>\n          <Col md={2}>\n            <Label>File Format</Label>\n            <Input\n              type=\"select\"\n              name=\"filetype\"\n              id=\"filetype\"\n              onChange={e => this.setState({ fileType: e.target.value })}\n            >\n              <option>CSV</option>\n              <option>Excel</option>\n              <option>JSON</option>\n            </Input>\n          </Col>\n        </FormGroup>\n        <hr />\n        <Button color=\"success\" onClick={this.generateData}>\n          Generate Data\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport { GeneratorForm };\n"]},"metadata":{},"sourceType":"module"}